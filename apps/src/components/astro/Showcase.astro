---
import type { HomeData } from "@/utils/interfaces/home";
import type { GetImageResult } from "astro";
import { getImage, Image } from "astro:assets";

export interface Props {
  data: HomeData;
}

// Access props directly from Astro.props
const { data } = Astro.props;

const identMap: { [key: string]: string } = {
  w: "win32",
  a: "community",
};

const home = data.home;
const splash = data.splash;

let splashHero: GetImageResult | undefined;
let splashSub: GetImageResult | undefined;
let splashThird: GetImageResult | undefined; // Added for explicit image optimization
let splashFourth: GetImageResult | undefined; // Added for explicit image optimization

const responsiveWidths = [
  100,
  200,
  320, // Small mobile
  640, // Medium mobile / Small tablet
  768, // Tablet / Small desktop
  1024, // Desktop
  1280, // Larger Desktop
  // You might want to include a width up to the maximum display size you expect,
  // but avoid going over the actual display size needed.
  // For a 2000x2000 source, consider the actual space the image will occupy on screen.
  // If your hero section is max 1400px wide, no need for widths > 1400px.
  1440, // Example: common max width for hero on larger screens
];

if (splash) {
  [splashHero, splashSub, splashThird, splashFourth] = await Promise.all([
    getImage({
      src: splash.hero.background,
      format: "webp",
      // For LCP, ensure `sizes` attribute is passed to the img tag
      // to help browser pick the right size quickly.
      // This height is for the *output* image. If it's a background, it's just a hint.
      widths: responsiveWidths, // Generate multiple widths
      inferSize: true, // Still useful for the aspect ratio
      quality: 80,
    }),
    getImage({
      src: splash.subhero.background,
      format: "webp",
      widths: responsiveWidths, // Generate multiple widths
      inferSize: true,
      quality: 80,
    }),
    getImage({
      // Now optimizing the third image as well
      src: splash.third.background,
      format: "webp",
      widths: responsiveWidths,
      inferSize: true,
      quality: 80,
    }),
    getImage({
      // Now optimizing the fourth image as well
      src: splash.fourth.background,
      format: "webp",
      widths: responsiveWidths,
      inferSize: true,
      quality: 80,
    }),
  ]);
}

// Import ChevronRight from lucide-react. This will be used in the client-side React component.
import { ChevronRight } from "lucide-react";
---

<script>
  // Find all buttons with the `alert` class on the page.
  const div = document.querySelector("#hero");

  div &&
    div.addEventListener("click", () => {
      const identMap: { [key: string]: string } = {
        w: "win32",
        a: "community",
      };

      const appId = div.getAttribute("data-app-id")!!;

      if (window.innerWidth < 768) {
        window.location.pathname = `/applications/view/${identMap[appId[0]]}/${appId.substring(2)}`;
      }
    });
</script>

<div class="px-2">
  {
    splash && (
      <>
        <div class="flex flex-col mt-3 lg:flex-row grow-0 w-full gap-5 animate">
          <div id="hero" class="hero" data-app-id={splash.hero.appId}>
            <Image
              src={splashHero!!.src}
              srcset={splashHero!!.srcSet.attribute}
              alt="Background"
              height={splashHero!!.attributes.height}
              width={splashHero!!.attributes.width}
              loading="eager"
              decoding="async"
              fetchpriority="high"
              class="absolute !select-none !object-cover"
            />
            <div class="relative z-5 flex flex-col h-full">
              <h1>{splash.hero.title}</h1>
              <h2 class="!text-black dark:!text-white">
                {splash.hero.description}
              </h2>

              <div class="w-full">
                <a
                  href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
                >
                  {splash.hero.button}
                </a>
              </div>

              <h3 class="mt-auto mb-2 hidden md:block">{splash.hero.author}</h3>
            </div>
          </div>

          <div class="cards">
            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.subhero.color }}>
                {splash.subhero.title}
              </div>
              <Image
                src={splashSub!!.src}
                srcset={splashSub!!.srcSet.attribute}
                alt="Background"
                height={splashSub!!.attributes.height}
                width={splashSub!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            </a>

            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.third.color }}>
                {splash.third.title}
              </div>
              <Image
                src={splashThird!!.src}
                srcset={splashThird!!.srcSet.attribute}
                alt="background"
                height={splashThird!!.attributes.height}
                width={splashThird!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            </a>

            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.fourth.color }}>
                {splash.fourth.title}
              </div>
              <Image
                src={splashFourth!!.src}
                srcset={splashFourth!!.srcSet.attribute}
                alt="Background"
                height={splashFourth!!.attributes.height}
                width={splashFourth!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="sync"
              />
            </a>
          </div>
        </div>
      </>
    )
  }

  {
    home?.map((apps) => (
      <div class="home_apps">
        <div>
          <span>{apps[0]}</span>
          {/* Re-integrated Lucide ChevronRight */}
          <ChevronRight className="arrow" />
          <button class="all">
            <span>All</span>
            {/* Re-integrated Lucide ChevronRight */}
            <ChevronRight className="arrow" />
          </button>
        </div>
        <div>
          {apps[1].map((app) => (
            <div>{app}</div>
          ))}
        </div>
      </div>
    ))
  }
</div>

<style>
  /* Import the existing CSS file */
  @import "./showcase.css";

  /* Add any additional Astro-specific styles here if needed */
</style>
