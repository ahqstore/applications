---
import type { HomeData } from "@/utils/interfaces/home";
import type { GetImageResult } from "astro";
import { getImage, Image } from "astro:assets";

export interface Props {
  data: HomeData;
  prefetched: Map<string, [AHQStoreApplication, string]>;
  os: string;
  hashes: Map<number, string>;
}

// Access props directly from Astro.props
const { data, prefetched, os, hashes } = Astro.props;

const identMap: { [key: string]: string } = {
  w: "win32",
  a: "community",
  f: "android",
  l: "linux",
};

const home = data.home;
const splash = data.splash;

let splashHero: GetImageResult | undefined;
let splashSub: GetImageResult | undefined;
let splashThird: GetImageResult | undefined; // Added for explicit image optimization
let splashFourth: GetImageResult | undefined; // Added for explicit image optimization

const responsiveWidths = [
  100,
  200,
  284,
  320, // Small mobile
  640, // Medium mobile / Small tablet
  768, // Tablet / Small desktop
  1024, // Desktop
  1280, // Larger Desktop
  // You might want to include a width up to the maximum display size you expect,
  // but avoid going over the actual display size needed.
  // For a 2000x2000 source, consider the actual space the image will occupy on screen.
  // If your hero section is max 1400px wide, no need for widths > 1400px.
  1440, // Example: common max width for hero on larger screens
];

if (splash) {
  [splashHero, splashSub, splashThird, splashFourth] = await Promise.all([
    getImage({
      src: splash.hero.background,
      format: "webp",
      // For LCP, ensure `sizes` attribute is passed to the img tag
      // to help browser pick the right size quickly.
      // This height is for the *output* image. If it's a background, it's just a hint.
      widths: responsiveWidths, // Generate multiple widths
      inferSize: true, // Still useful for the aspect ratio
      quality: 80,
    }),
    getImage({
      src: splash.subhero.background,
      format: "webp",
      widths: responsiveWidths, // Generate multiple widths
      inferSize: true,
      quality: 80,
    }),
    getImage({
      // Now optimizing the third image as well
      src: splash.third.background,
      format: "webp",
      widths: responsiveWidths,
      inferSize: true,
      quality: 80,
    }),
    getImage({
      // Now optimizing the fourth image as well
      src: splash.fourth.background,
      format: "webp",
      widths: responsiveWidths,
      inferSize: true,
      quality: 80,
    }),
  ]);
}

// Import ChevronRight from lucide-react. This will be used in the client-side React component.
import { ArrowRight, ChevronRight } from "lucide-react";
import { SearchResults } from "../react/SearchResults";
import type { AHQStoreApplication } from "ahqstore-types";

import AppBox from "./AppBox.astro";
---

<script>
  // Find all buttons with the `alert` class on the page.
  const div = document.querySelector("#hero");

  div &&
    div.addEventListener("click", () => {
      const identMap: { [key: string]: string } = {
        w: "win32",
        a: "community",
        f: "android",
        l: "linux",
      };

      const appId = div.getAttribute("data-app-id")!!;

      if (window.innerWidth < 768) {
        window.location.pathname = `/applications/view/${identMap[appId[0]]}/${appId.substring(2)}`;
      }
    });
</script>

<script>
  import { searchStore } from "@/search/searchStore";

  const normal = () => {
    const toShowElements = document.querySelectorAll(".show_when_searching");
    const toHideElements = document.querySelectorAll(".hide_when_searching");

    toHideElements.forEach((s) => s.classList.remove("!hidden"));
    toShowElements.forEach((s) => s.classList.add("!hidden"));
  };
  const hide = () => {
    const toShowElements = document.querySelectorAll(".show_when_searching");
    const toHideElements = document.querySelectorAll(".hide_when_searching");

    toHideElements.forEach((s) => s.classList.add("!hidden"));
    toShowElements.forEach((s) => s.classList.remove("!hidden"));
  };

  function process(content: string | undefined) {
    if (!content || content.length == 0) {
      normal();
    } else {
      hide();
    }
  }

  searchStore.subscribe((content) => process(content));
</script>

<style is:global>
  @import "./showcase.css";
</style>

<div class="px-2">
  <SearchResults className="!hidden show_when_searching" client:idle />

  {
    splash && (
      <>
        <div class="flex flex-col mt-3 lg:flex-row grow-0 w-full gap-5 animate hide_when_searching">
          <div id="hero" class="hero" data-app-id={splash.hero.appId}>
            <Image
              src={splashHero!!.src}
              srcset={splashHero!!.srcSet.attribute}
              alt="Background"
              height={splashHero!!.attributes.height}
              width={splashHero!!.attributes.width}
              loading="eager"
              decoding="async"
              fetchpriority="high"
              style="filter: brightness(0.75);"
              class="absolute !select-none !object-cover"
            />
            <div class="relative z-5 flex flex-col h-full">
              <h1 class="!text-white">{splash.hero.title}</h1>
              <h2 class="!text-white">{splash.hero.description}</h2>

              <div class="w-full">
                <a
                  href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
                >
                  {splash.hero.button}
                </a>
              </div>

              <h3 class="mt-auto mb-2 hidden md:block !text-white">
                {splash.hero.author}
              </h3>
            </div>
          </div>

          <div class="cards">
            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.subhero.color }}>
                {splash.subhero.title}
              </div>
              <Image
                src={splashSub!!.src}
                srcset={splashSub!!.srcSet.attribute}
                alt="Background"
                height={splashSub!!.attributes.height}
                width={splashSub!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            </a>

            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.third.color }}>
                {splash.third.title}
              </div>
              <Image
                src={splashThird!!.src}
                srcset={splashThird!!.srcSet.attribute}
                alt="background"
                height={splashThird!!.attributes.height}
                width={splashThird!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="async"
              />
            </a>

            <a
              href={`/applications/view/${identMap[splash.hero.appId[0]]}/${splash.hero.appId.substring(2)}`}
            >
              <div style={{ color: splash.fourth.color }}>
                {splash.fourth.title}
              </div>
              <Image
                src={splashFourth!!.src}
                srcset={splashFourth!!.srcSet.attribute}
                alt="Background"
                height={splashFourth!!.attributes.height}
                width={splashFourth!!.attributes.width}
                loading="eager"
                fetchpriority="high"
                decoding="sync"
              />
            </a>
          </div>
        </div>
      </>
    )
  }

  <script>
    document.querySelectorAll(".desktopClick").forEach((item) => {
      const e = item as HTMLDivElement;

      e.addEventListener("click", () => {
        if (window.matchMedia("(min-width: 50rem)").matches) {
          window.location.pathname = e.getAttribute("data-path")!!;
        }
      });
    });

    document.querySelectorAll(".mobileClick").forEach((item) => {
      const e = item as HTMLDivElement;

      e.addEventListener("click", () => {
        if (!window.matchMedia("(min-width: 50rem)").matches) {
          window.location.pathname = e.getAttribute("data-path")!!;
        }
      });
    });

    document.querySelectorAll(".registerOnClick").forEach((item) => {
      const e = item as HTMLDivElement;

      e.addEventListener("click", () => {
        if (window.matchMedia("(min-width: 50rem)").matches) {
          window.location.pathname = e.getAttribute("data-path")!!;
        }
      });
    });
  </script>

  {
    home?.map((apps, i) => (
      <div class="home_apps hide_when_searching">
        <div
          class="desktopClick"
          data-path={`/applications/${os}/${hashes.get(i)!!}`}
        >
          <span>{apps[0]}</span>
          <ChevronRight className="arrow" />
          <button
            data-path={`/applications/${os}/${hashes.get(i)!!}`}
            class="all mobileClick"
          >
            <ArrowRight className="arrow" />
          </button>
        </div>

        <div>
          {apps[1]
            .filter((_, i) => i < 10)
            .map((app) => (
              <AppBox
                application={prefetched.get(app)!![0]}
                img={prefetched.get(app)!![1]}
                path={`/applications/view/${identMap[app[0]]}/${app.substring(2)}`}
              />
            ))}
        </div>
      </div>
    ))
  }
</div>
