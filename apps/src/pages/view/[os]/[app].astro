---
import type { GetStaticPathsResult } from "astro";
import { decode } from "@msgpack/msgpack";

import { readFileSync, writeFileSync } from "node:fs";
import { join } from "node:path";

interface Props {
  prefix: string;
  app: string;
  template: string;
  repoDir: string;
}

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const output: GetStaticPathsResult = [];

  const toFetch = [
    {
      prefix: "a",
      name: "map_data_ahqstore_json",
      app: "app_url_ahqstore",
      os: "community",
      repo_dir: "repo_community",
    },
    {
      prefix: "l",
      name: "map_data_linux_json",
      app: "app_url_linux",
      os: "linux",
      repo_dir: "repo_linux",
    },
    {
      prefix: "f",
      name: "map_data_fdroid_json",
      app: "app_url_fdroid",
      os: "android",
      repo_dir: "repo_fdroid",
    },
    {
      prefix: "w",
      name: "map_data_winget_json",
      app: "app_url_winget",
      os: "win32",
      repo_dir: "repo_win32",
    },
  ];

  toFetch.forEach(({ name, os, app, prefix, repo_dir }) => {
    const data = decode(
      readFileSync(
        join(import.meta.dirname, `../../../../public/jsondump/${name}`)
      )
    ) as string[];

    const appUrl = readFileSync(
      join(import.meta.dirname, `../../../../public/jsondump/${app}`)
    ).toString();

    data.forEach((id) => {
      const data = /.:(.*)/;

      const identifier = data.exec(id)!![1];

      output.push({
        params: {
          os,
          app: identifier,
        },
        props: {
          prefix,
          app: identifier,
          template: appUrl,
          repoDir: repo_dir,
        },
      });
    });
  });

  return output;
}

const { prefix, repoDir, app, template } = Astro.props;

console.log("Dev: ", import.meta.env.DEV);

let appInfo;

if (import.meta.env.DEV) {
  appInfo = await fetch(template.replace("{APP_ID}", app)).then(async (s) => {
    if (!s.ok) {
      const body = await (await s.blob()).text();
      console.log(body);

      throw new Error("Received an error!");
    }
    return s.json();
  });
} else {
  const json = JSON.parse(
    readFileSync(
      join(import.meta.dirname, `../../../../../${repoDir}/db/apps/${app}.json`)
    ).toString()
  );

  // Actual appInfo loading
  const path = join(
    import.meta.dirname,
    `../../../../public/api/v1/${prefix}/${app}.json`
  );

  writeFileSync(path, JSON.stringify(json));

  appInfo = json;
}
---

<div>
  {JSON.stringify(appInfo, null, 4)}
</div>
